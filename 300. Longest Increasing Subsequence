class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        tails = [0] * len(nums)
        size = 0
        for x in nums:
            i = 0
            j = size
            while i != j:
                m = (i+j)//2
                if tails[m] < x:
                    i = m+1
                else:
                    j = m
            tails[i] = x
            size = max(i+1,size)
        return size
        
        

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        if len(nums) <=1:
            return len(nums)
        dp = [1] * len(nums)
        max_el = 0
        for i in range(1,len(nums)):
            for j in range(i):
                if nums[j] < nums[i]:
                    dp[i] = max(dp[i],dp[j]+1)
                
            max_el = max(max_el, dp[i])
        
        return max_el


class Solution: O(n2)
    def lengthOfLIS(self, nums: List[int]) -> int:
        dp = [1] * len(nums)
        for i in range(len(nums)-1,-1,-1):
            for j in range(i+1,len(nums)):
                if nums[i] < nums[j]:
                    dp[i] = max(dp[i], 1+dp[j])
        return max(dp)
        
