class Solution:
    def isPalindromeRec(self, head, node):
        if not node:
            return (head, True)
        
        cur, is_palindrome = self.isPalindromeRec(head, node.next)
        if not is_palindrome:
            return (None, False)
        if cur.val != node.val:
            return (None, False)
        return (cur.next, True)
        
    def isPalindrome(self, head: ListNode) -> bool:
        return self.isPalindromeRec(head, head)[1]


class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        ptr1,ptr2 = head,head
        while ptr1 and ptr1.next:
            ptr1 = ptr1.next.next
            ptr2 = ptr2.next
        
        ptr2 = self.reversedd(ptr2)
        ptr1 = head
        
        while ptr2:
            if ptr2.val != ptr1.val:
                return False
            ptr2 = ptr2.next
            ptr1 = ptr1.next
        return True

    def reversedd(self,ptr2):
        prev = None
        while ptr2:
            temp = ptr2.next
            ptr2.next = prev
            prev = ptr2
            ptr2 = temp
        return prev
            

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        slow = fast = head
        prev = None
        while fast and fast.next:
            temp = slow
            slow = slow.next
            fast = fast.next.next
            temp.next = prev
            prev = temp
        if fast:
            slow = slow.next
        while prev and prev.val == slow.val:
            slow = slow.next
            prev = prev.next
        return not prev
            
            
