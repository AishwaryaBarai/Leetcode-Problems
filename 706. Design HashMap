class MyHashMap:

    def __init__(self):
        self.arr = [-1] *1000001
        

    def put(self, key: int, value: int) -> None:
        self.arr[key] = value
        
        

    def get(self, key: int) -> int:
        return self.arr[key]
        

    def remove(self, key: int) -> None:
        self.arr[key] = -1
        

class Node:
    def __init__(self,key,value):
        self.key = key
        self.value = value
        self.next = None

class MyHashMap:

    def __init__(self):
        self.capacity = 1000
        self.hash_table = [None] * self.capacity
        
    def hash(self,key):
        idx = key % self.capacity
        return idx

    def put(self, key: int, value: int) -> None:
        
        idx = self.hash(key)
        if self.hash_table[idx] == None:
            self.hash_table[idx] = Node(key,value)
        else:
            curr = self.hash_table[idx]
            while curr:
                if curr.key == key:
                    curr.value = value
                    return
                if curr.next == None:
                    break
                else:
                    curr = curr.next
            curr.next = Node(key,value)
        

    def get(self, key: int) -> int:
        idx = self.hash(key)
        curr = self.hash_table[idx]
        while curr:
            if curr.key == key:
                return curr.value
            else:
                curr = curr.next
        return -1
        

    def remove(self, key: int) -> None:
        index = self.hash(key)
        
        if self.hash_table[index]== None:
            return
        curr_node = prev_node = self.hash_table[index]
        if curr_node.key == key:
            self.hash_table[index] = curr_node.next
        else:
            curr_node = curr_node.next
            
            while curr_node:

                if curr_node.key == key:
                    prev_node.next = curr_node.next
                    break
                else:
                    prev_node = prev_node.next
                    curr_node = curr_node.next 
