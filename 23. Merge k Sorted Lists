# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        heap = []
        for heads in lists:
            while heads:
                heappush(heap, heads.val)
                heads = heads.next
        dummy = ListNode(-1)
        head = dummy
        while heap:
            dummy.next = ListNode(heappop(heap))
            dummy = dummy.next
        return head.next
        


class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        h = [(l.val,idx) for idx,l in enumerate(lists) if l]
        heapq.heapify(h)
        head = curr = ListNode(0)
        while h:
            val,idx = heapq.heappop(h)
            curr.next = ListNode(val)
            curr = curr.next
            node = lists[idx] = lists[idx].next]
            if node:
                heapq.heappush(h,(node.val,idx))
        return head.next
