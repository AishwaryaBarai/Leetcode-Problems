# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        stack = []
        inorder = float('-inf')
        
        while stack or root:
            while root:
                stack.append(root)
                root = root.left
            root = stack.pop()
            if root.val <= inorder:
                return False
            inorder = root.val
            root = root.right
        return True
        


    # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        
        return self.validate(root)
        
    def validate(self, node, low = -math.inf, high = math.inf):
        if not node:
            return True
        
        if node.val <= low or node.val >= high:
            return False
        
        return self.validate(node.right,node.val,high) and self.validate(node.left,low,node.val)
    
    
    
        def isValidBST(self, root: TreeNode,low = -math.inf,high = math.inf) -> bool:
        if not root:
            return True
        if not(low < root.val<high):
            return False
        return self.isValidBST(root.left,low,root.val) and self.isValidBST(root.right,root.val,high)
        
