class Solution:
    def partitionDisjoint(self, A):
        N = len(A)
        maxleft = [None] * N
        minright = [None] * N
        m = A[0]
        for i in range(N):
            m = max(m, A[i])
            maxleft[i] = m

        m = A[-1]
        for i in range(N-1, -1, -1):
            m = min(m, A[i])
            minright[i] = m

        for i in range(1, N):
            if maxleft[i-1] <= minright[i]:
                return i
        


class Solution:
    def partitionDisjoint(self, nums: List[int]) -> int:
        l = len(nums)
        max_left = [None] * l
        min_right = [None] * l
        maxleft = nums[0]
        minright = nums[-1]
        
        for i in range(l):
            max_left[i] = max(nums[i],maxleft)
            maxleft = max_left[i]
        for i in range(l-1,-1,-1):
            min_right[i] = min(minright,nums[i])
            minright = min_right[i]
            
        for i in range(1,l):
            if max_left[i-1] <= min_right[i]:
                return i
        
        
        
        class Solution:
    def partitionDisjoint(self, nums: List[int]) -> int:
        maxx = nums[0]
        allmax = nums[0]
        sol = 1
        for i in range(1,len(nums)):
            if nums[i] < maxx:
                sol = i+1
                maxx = allmax
            else:
                allmax = max(allmax,nums[i])
        return sol
