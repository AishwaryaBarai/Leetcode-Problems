class Solution:
    def pacificAtlantic(self, matrix: List[List[int]]) -> List[List[int]]:
        if not matrix:
            return None
        m = len(matrix)
        n = len(matrix[0])
        p_visited = set()
        a_visited = set()
        directions = [(-1,0),(1,0),(0,1),(0,-1)]
        
        
        def dfs(visited,x,y):
            visited.add((x,y))
            for dirx, diry in directions:
                new_x, new_y = x+dirx,y+diry
                if 0<= new_x <m and 0<= new_y <n and(new_x,new_y) not in visited and matrix[new_x][new_y] >= matrix[x][y]:
                    dfs(visited,new_x,new_y)
        
        for i in range(m):
            dfs(p_visited,i,0)
            dfs(a_visited,i,n-1)
            
        for j in range(n):
            dfs(p_visited,0,j)
            dfs(a_visited,m-1,j)     
                    
        return list(p_visited.intersection(a_visited))
                
