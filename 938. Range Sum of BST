class Solution:
    def rangeSumBST(self, root: TreeNode, low: int, high: int) -> int:
        res = 0
        stack = [root]
        while stack:
            curr = stack.pop()
            if curr:
                if low <= curr.val <= high:
                    res += curr.val
                if curr.val < high:
                    stack.append(curr.right)
                if curr.val > low:
                    stack.append(curr.left)
        return res
        





class Solution:
    def rangeSumBST(self, root: TreeNode, low: int, high: int) -> int:
        res = 0
        stack = [root]
        while stack:
            curr = stack.pop()
            if low <= curr.val <= high:
                res += curr.val
            if curr.left:
                stack.append(curr.left)
            if curr.right:
                stack.append(curr.right)
        return res
        
        


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rangeSumBST(self, root: TreeNode, low: int, high: int) -> int:
        ans = 0
        stack = [root]
        while stack:
            node = stack.pop()
            if node:
                if low <= node.val<= high:
                    ans += node.val
                if node.val > low:
                    stack.append(node.left)
                if node.val < high:
                    stack.append(node.right)
        return ans
        
