class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        graph = defaultdict(defaultdict)
        
        def backtrack(curr_node,target_node,acc_product,visited):
            visited.add(curr_node)
            ret = -1.0
            neighbors = graph[curr_node]
            if target_node in neighbors:
                ret = acc_product *neighbors[target_node]
            else:
                for neighbor,value in neighbors.items():
                    if neighbor in visited:
                        continue
                    ret = backtrack(neighbor,target_node,acc_product*value,visited)
                    if ret != -1:
                        break
            visited.remove(curr_node)
            return ret
                 
        
        for (div,divisor),value in zip(equations,values):
            graph[div][divisor] = value
            graph[divisor][div] = 1/value
            
        res = []
        for div, divisor in queries:
            if div not in graph or divisor not in graph:
                ret = -1.0
            elif div == divisor:
                ret = 1.0
            else:
                visited = set()
                ret = backtrack(div,divisor,1,visited)
            res.append(ret)
        return res
    
  



class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        graph = collections.defaultdict(dict)
        for (x,y),val in zip(equations,values):
            graph[x][y] = val
            graph[y][x] = 1.0/val
            
        def dfs(x,y,visited):
            if x not in graph or y not in graph:
                return -1.0
            
            if y in graph[x]:
                return graph[x][y]
            
            for i in graph[x]:
                if i not in visited:
                    visited.add(i)
                    temp = dfs(i,y,visited)
                    if temp == -1:
                        continue
                    else:
                        return graph[x][i] * temp
            return -1
            
        
        
        res = []
        for query in queries:
            res.append(dfs(query[0],query[1],set()))
        return res
