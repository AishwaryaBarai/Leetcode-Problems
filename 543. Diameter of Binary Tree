class Solution:
    ans = 0
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        self.helper(root)
        if not self.ans:
            return 0
        else:
            return self.ans -1
    
    def helper(self,root):
        if not root:
            return 0
        left = self.helper(root.left)
        right = self.helper(root.right)
        self.ans = max(self.ans,left+right +1)
        return max(left,right) +1


class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        left = self.depth(root.left)
        right = self.depth(root.right)
        
        left_dia = self.diameterOfBinaryTree(root.left)
        right_dia = self.diameterOfBinaryTree(root.right)
        
        return max((left + right), max(left_dia,right_dia))
        
        
        
    def depth(self,node):
        if not node:
            return 0
        left = self.depth(node.left)
        right = self.depth(node.right)
        
        return max(left,right) +1


class Solution(object):
    def diameterOfBinaryTree(self, root):
        self.ans = 1
        def depth(node):
            if not node: return 0
            L = depth(node.left)
            R = depth(node.right)
            self.ans = max(self.ans, L+R+1)
            return max(L, R) + 1

        depth(root)
        return self.ans - 1
