DP:

class Solution:
    def rob(self, nums: List[int]) -> int:
        prev1,prev2 = 0,0
        for i in nums:
            cur = max(prev1,i+prev2)
            prev2 = prev1
            prev1 = cur

        return prev1
        
        
class Solution:
    def rob(self, nums: List[int]) -> int:
        if(len(nums) == 0): 
            return 0
        if(len(nums) == 1): 
            return nums[0]
        
        dp = [0]*len(nums)
        dp[0] = nums[0]
        dp[1] = max(nums[0],nums[1])
        for i in range(2, len(nums)):
            dp[i] = max(nums[i]+dp[i-2], dp[i-1])
        return max(dp[-1],dp[-2])


class Solution:
    def rob(self, nums: List[int]) -> int:     
        for i in range(2, len(nums)):
            nums[i] += max(nums[:i-1])
        return max(nums) if nums else 0
        
        
        
 class Solution:
    def rob(self, nums: List[int]) -> int:
        prevMax = 0
        curmax = 0
        for i in nums:
            temp = curmax
            curmax = max(prevMax+i,curmax)
            prevMax = temp
        return curmax
        
        

        
