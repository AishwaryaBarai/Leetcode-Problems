class MedianFinder:

	def __init__(self):
		"""
		initialize your data structure here.
		"""
		from sortedcontainers import SortedList
		self.sl = SortedList([])


	def addNum(self, num: int) -> None:
		self.sl.add(num)


	def findMedian(self) -> float:
		n = len(self.sl)
		if n % 2:
			return self.sl[n//2]
		else:
			return (self.sl[n//2] + self.sl[n//2 - 1])/2


class MedianFinder:

    def __init__(self):
        self.min_heap = []
        self.max_heap = []
        

    def addNum(self, num: int) -> None:
        heapq.heappush(self.max_heap,-num)
        heapq.heappush(self.min_heap,-self.max_heap[0])
        heapq.heappop(self.max_heap)
        
        if len(self.max_heap) < len(self.min_heap):
            heapq.heappush(self.max_heap,-self.min_heap[0])
            heapq.heappop(self.min_heap)
        

    def findMedian(self) -> float:
        if len(self.max_heap) > len(self.min_heap):
            return -self.max_heap[0]
        else:
            return (-self.max_heap[0] + self.min_heap[0])/2
