class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        stack1 = []
        stack2 = []
        while l1:
            stack1.append(l1.val)
            l1 = l1.next
        while l2:
            stack2.append(l2.val)
            l2 = l2.next
        res = ListNode(0)
        fres = res
        carry = 0
        while stack1 and stack2:
            summ = stack1.pop() + stack2.pop() + carry
            #print(summ)
            carry = summ//10
            num = summ %10
            res.next = ListNode(num)
            res = res.next
            #print(res)
        if stack1:
            while stack1:
                summ = stack1.pop() + carry 
                res.next = ListNode(summ%10)
                carry = summ//10
                res = res.next
        if stack2:
            while stack2:
                summ = stack2.pop() + carry 
                res.next = ListNode(summ%10)
                carry = summ//10
                res = res.next
        if carry:
            res.next = ListNode(carry)
        curr = fres.next
        prev = None
        while curr:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        return prev
   
   
   
   
   # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverse(self,l):
        prev = None
        curr = l
        while curr:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        return prev
            
        
    
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        l1 = self.reverse(l1)
        l2 = self.reverse(l2)
        dummy = ListNode(0)
        ret = dummy
        summ = 0
        carry = 0
        while l1 or l2:
            if not l1:
                l1 = ListNode(0)
            if not l2:
                l2= ListNode(0)
            summ = l1.val + l2.val + carry
            carry = summ //10
            dummy.next = ListNode(summ%10)
            dummy = dummy.next
            l1 = l1.next
            l2 = l2.next
        if carry:
            dummy.next = ListNode(carry)
        return self.reverse(ret.next)

