class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        ans = []
        def traversal(level, node):
            if node:
                if len(ans) <= level:
                    ans.append([node.val])
                else:
                    ans[level].append(node.val)

                traversal(level+1, node.left)
                traversal(level+1, node.right)

        traversal(0, root)

        return ans


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
import queue
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        res = []
        q = queue.Queue()
        if not root:
            return None
        q.put(root)
        while not q.empty():
            a = []
            size = q.qsize()
            while size != 0:
                curr = q.get()
                a.append(curr.val)
                if curr.left:
                    q.put(curr.left)
                if curr.right:
                    q.put(curr.right)
                size-=1
            if len(a) !=0:
                res.append(a)
        return res
        
        
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        res = []
        if not root:
            return res
        stack = []
        stack.append(root)       
        while stack:
            l = []
            n = len(stack)
            for i in range(n):
                curr = stack.pop(0)
                l.append(curr.val)
                if curr.left:
                    stack.append(curr.left)
                if curr.right:
                    stack.append(curr.right)
                
              
            res.append(l)
        return res
        
