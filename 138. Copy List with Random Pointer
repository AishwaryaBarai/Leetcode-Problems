class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        if not head: return None
        p1 = head
        dic = {}
        while p1 != None:
            newNode = Node(p1.val, None, None)
            dic[p1] = newNode
            p1 = p1.next
        p2 = head
        while p2 != None:
            new_p2 = dic[p2]
            if p2.next != None:
                new_p2.next = dic[p2.next]
            if p2.random != None:
                new_p2.random = dic[p2.random]
            p2 = p2.next
        return dic[head]
        
        
   class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        if not head:
            return None
        d = {}
        curr = head
        while curr:
            d[curr] = Node(curr.val,None,None)
            curr = curr.next
        curr = head
        while curr:
            if curr.next:
                d[curr].next = d[curr.next]
            if curr.random:
                d[curr].random  = d[curr.random]
            curr = curr.next
        return d[head]
        
        
        
      class Solution(object):
    def copyRandomList(self, head):

        if not head:
            return head

        ptr = head
        while ptr:

            new_node = Node(ptr.val, None, None)

            new_node.next = ptr.next
            ptr.next = new_node
            ptr = new_node.next

        ptr = head

        while ptr:
            ptr.next.random = ptr.random.next if ptr.random else None
            ptr = ptr.next.next

        ptr_old_list = head 
        ptr_new_list = head.next 
        head_new = head.next
        while ptr_old_list:
            ptr_old_list.next = ptr_old_list.next.next
            ptr_new_list.next = ptr_new_list.next.next if ptr_new_list.next else None
            ptr_old_list = ptr_old_list.next
            ptr_new_list = ptr_new_list.next
        return head_new
            
        
