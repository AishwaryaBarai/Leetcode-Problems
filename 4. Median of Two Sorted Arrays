class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        l1 = len(nums1)
        l2 = len(nums2)
        middle = (l1 + l2)/2
        
        if middle == 0.5:
            if l1 > l2:
                return float(nums1[0])
            else:
                return float(nums2[0])
        
        x = y = 0
        curr = 0
        prev = 0
        
        if middle % 1 == 0:
            loops = middle +1
        else:
            loops = middle + 0.5
            
        for i in range(int(loops)):
            prev = curr
            if x == l1:
                curr = nums2[y]
                y+=1
                
            elif y == l2:
                curr = nums1[x]
                x+=1
                
            elif nums1[x] > nums2[y]:
                curr = nums2[y]
                y+=1
            else:
                curr = nums1[x]
                x+=1
                
        if middle %1 == 0.0:
            return (curr + prev) /2
        else:
            return float(curr)
   
   
   
   class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if len(nums1) > len(nums2):
            return self.findMedianSortedArrays(nums2,nums1)
        x = len(nums1)
        y = len(nums2)
        
        low = 0
        high = x
        
        while low <= high:
            partitionX = (low + high)//2
            partitionY = (x+y +1)//2 - partitionX
            
            max_leftX = -math.inf if partitionX == 0 else nums1[partitionX-1]
            min_rightX = math.inf if partitionX == x else nums1[partitionX]
            
            max_leftY = -math.inf if partitionY == 0 else nums2[partitionY-1]
            min_rightY = math.inf if partitionY == y else nums2[partitionY]
            
            if max_leftX <= min_rightY and max_leftY <= min_rightX:
                if (x+y) %2 ==0:
                    return (max(max_leftX,max_leftY) + min(min_rightX,min_rightY))/2
                else:
                    return max(max_leftX,max_leftY)
            elif max_leftX > min_rightY:
                high = partitionX-1
            else:
                low = partitionX+1
                
            
