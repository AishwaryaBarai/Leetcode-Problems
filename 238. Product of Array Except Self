class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        l = len(nums)
        L = [0]*l
        R = [0]*l
        ans = [0]*l
        L[0] = 1
        for i in range(1,l):
            L[i] = nums[i-1] * L[i-1]
        R[-1] = 1
        for i in reversed(range(l-1)):
            R[i] = R[i+1]*nums[i+1]
        for i in range(l):
            ans[i] = L[i] * R[i]
        return ans


class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        length = len(nums)
        answer = [0]*length
        answer[0] = 1
        for i in range(1, length):
            answer[i] = nums[i - 1] * answer[i - 1]
        R = 1
        for i in reversed(range(length)):
            answer[i] = answer[i] * R
            R *= nums[i]
        
        return answer
